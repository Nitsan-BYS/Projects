{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitsa\\\\Desktop\\\\Programming\\\\Github Projects\\\\Quizzi Project\\\\quizzi-client\\\\src\\\\Components\\\\LeaderboardPage\\\\LeaderboardPage.js\",\n    _s = $RefreshSig$();\n\nimport { Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@mui/material';\nimport styles from './LeaderboardPage.module.css';\nimport httpService from '../../Services/httpService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LeaderboardPage = () => {\n  _s();\n\n  const [players, setPlayers] = useState([]);\n  useEffect(() => {\n    const fetchData = () => {\n      fetch(httpService.getUrl('api/players'), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        const sortDataWithRank = data.sort((a, b) => {\n          if (a.gamesWins > b.gamesWins) {\n            return -1;\n          }\n\n          if (a.gamesWins < b.gamesWins) {\n            return 1;\n          }\n\n          return 0;\n        }).map((item, idx) => {\n          const newItem = { ...item\n          };\n          newItem['rank'] = idx + 1;\n          return newItem;\n        });\n        setPlayers(sortDataWithRank);\n      });\n    };\n\n    fetchData();\n  }, []);\n  const columns = [{\n    id: 'rank',\n    label: 'Rank',\n    align: 'left',\n    minWidth: 1\n  }, {\n    id: 'player',\n    label: 'Player',\n    align: 'left',\n    minWidth: 1\n  }, {\n    id: 'score',\n    label: 'Points',\n    align: 'left',\n    minWidth: 1\n  }];\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    sx: {\n      maxWidth: 1200\n    },\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h4\",\n      align: \"center\",\n      id: styles.title,\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"LEADERBOARD \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n            sx: {\n              minWidth: 80,\n              color: '#F84570',\n              fontWeight: 'bold'\n            },\n            align: column.align,\n            children: column.label\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: players.map(player => {\n          return /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            role: \"checkbox\",\n            tabIndex: -1,\n            children: ['rank', 'name', 'pointsEarned'].map(field => {\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                align: 'left',\n                sx: {\n                  color: '#F84570'\n                },\n                children: player[field]\n              }, field, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this);\n            })\n          }, player.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LeaderboardPage, \"X/Tdqu5+Xz4mrEJLe3+u4Igo5rg=\");\n\n_c = LeaderboardPage;\nexport default LeaderboardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaderboardPage\");","map":{"version":3,"sources":["C:/Users/nitsa/Desktop/Programming/Github Projects/Quizzi Project/quizzi-client/src/Components/LeaderboardPage/LeaderboardPage.js"],"names":["Typography","useEffect","useState","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","styles","httpService","LeaderboardPage","players","setPlayers","fetchData","fetch","getUrl","headers","then","response","json","data","console","log","sortDataWithRank","sort","a","b","gamesWins","map","item","idx","newItem","columns","id","label","align","minWidth","maxWidth","container","title","column","color","fontWeight","player","field"],"mappings":"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","sourcesContent":["import { Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@mui/material';\nimport styles from './LeaderboardPage.module.css';\nimport httpService from '../../Services/httpService';\n\nconst LeaderboardPage = () => {\n  const [players, setPlayers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      fetch(httpService.getUrl('api/players'), {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const sortDataWithRank = data\n            .sort((a, b) => {\n              if (a.gamesWins > b.gamesWins) {\n                return -1;\n              }\n              if (a.gamesWins < b.gamesWins) {\n                return 1;\n              }\n              return 0;\n            })\n            .map((item, idx) => {\n              const newItem = { ...item };\n              newItem['rank'] = idx + 1;\n              return newItem;\n            });\n          setPlayers(sortDataWithRank);\n        });\n    };\n    fetchData();\n  }, []);\n\n  const columns = [\n    { id: 'rank', label: 'Rank', align: 'left', minWidth: 1 },\n    { id: 'player', label: 'Player', align: 'left', minWidth: 1 },\n    { id: 'score', label: 'Points', align: 'left', minWidth: 1 },\n  ];\n\n  return (\n    <TableContainer sx={{ maxWidth: 1200 }} className={styles.container}>\n      <Typography variant='h4' component='h4' align='center' id={styles.title}>\n        <b>LEADERBOARD </b>\n      </Typography>\n      <Table stickyHeader aria-label='sticky table'>\n        <TableHead>\n          <TableRow>\n            {columns.map((column) => (\n              <TableCell\n                sx={{ minWidth: 80, color: '#F84570', fontWeight: 'bold' }}\n                key={column.id}\n                align={column.align}\n              >\n                {column.label}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {players.map((player) => {\n            return (\n              <TableRow key={player.id} hover role='checkbox' tabIndex={-1}>\n                {['rank', 'name', 'pointsEarned'].map((field) => {\n                  return (\n                    <TableCell\n                      key={field}\n                      align={'left'}\n                      sx={{ color: '#F84570' }}\n                    >\n                      {player[field]}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default LeaderboardPage;\n"]},"metadata":{},"sourceType":"module"}